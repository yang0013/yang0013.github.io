<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-08-12T21:16:08+08:00</updated><id>/</id><title type="html">Yang</title><subtitle></subtitle><entry><title type="html">bancor 协议简介</title><link href="/blockchain/2018/08/12/bancor-protocol.html" rel="alternate" type="text/html" title="bancor 协议简介" /><published>2018-08-12T10:06:24+08:00</published><updated>2018-08-12T10:06:24+08:00</updated><id>/blockchain/2018/08/12/bancor-protocol</id><content type="html" xml:base="/blockchain/2018/08/12/bancor-protocol.html">&lt;h3 id=&quot;bancor-是什么&quot;&gt;Bancor 是什么&lt;/h3&gt;

&lt;p&gt;Bancor 是以太坊的一个项目，是一个货币系统，通过智能合约为数字货币提供持续流动性。Bancor 解决了交易量小的数字货币的流动性。它不需要第三方的机构，也不需要第二方，通过智能合约就能买卖 Token。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bancor 协议使智能合约区块链上的自动价格发现和自主流动机制成为可能。这些智能代币拥有一个或者多个连接器，连接到持有其他代币的网络，允许用户直接通过智能代币的合约，按照一个持续计算以保持买入卖出交易量平衡的价格，立即为已连接的代币购买或清算智能代币。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bancor 提出了一种价格发现机制，连接器代币(Connector Token)的权重（简称 CW：connector weight），这个参数范围在 0 至 100% 之间，设定后就被智能合约锁定，再无法修改。这个参数会作为价格发现机制的计算参数之一。BANCOR 用 ETH 作为背书并作为储备代币，CW 设置并维持在 20%。&lt;/p&gt;

&lt;p&gt;Bancor 适合于尾部 Token 的交易，即交易量小的 Token，由于交易量小，你要买的时候可能没人卖，要卖的时候没人买。这就是小众 Token 的流动性问题。如果通过 Bancor 来发行，就不用担心这个问题。&lt;/p&gt;

&lt;p&gt;发行的时候指定一个参数 CW，公式如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CW = 连接器代币余额 / 智能代币总价值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;智能代币总价值 = 代币单价 × 智能代币总供应量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过上面两个公式就可以推算出价格公式&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;代币单价 = 连接器代币余额 / (智能代币结余供应量 × CW)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当参数 CW 值不同时，价格曲线变化如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://appjiayou11.qiniudn.com/bancor-cw&quot; alt=&quot;different cw&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当 CW = 100%，可以认为发行代币是连接器代币的别名，不管需求如何变化，所发行代币的价格总是等于连接器代币的价格。&lt;/li&gt;
  &lt;li&gt;当 CW = 50%：所发行代币和其供应量呈线性关系。&lt;/li&gt;
  &lt;li&gt;当 CW &amp;lt; 50%，图中 CW = 10%，随着供给的增加，价格增长迅猛。&lt;/li&gt;
  &lt;li&gt;当 CW &amp;gt; 50%，图中 CW = 90%，随供给的增加，价格变化小。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于每增加一个代币时，价格便发生变化，假如我一次性买入100个代币，那么价格应当是怎样的？Bancor 提供了一个公式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://appjiayou11.qiniudn.com/token&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;卖出代币的计算公式：
&lt;img src=&quot;http://appjiayou11.qiniudn.com/token withdraw&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;知道兑换的代币数量和连接器代币数量，就可以计算有效价格：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;有效价格 = 参与兑换的连接器代币的数量 / 参与兑换的智能代币的数量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;举个例子：假设现在有一个代币，当前总供应量为 1000，它的连接器拥有 250 数量的连接器代币，CW 值为 50%，此智能代币可按以下价格转换为其连接器代币:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;价格 = 250 / (1000 × 50%) = 0.5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;加入我要将 10 个连接器代币转换为智能代币。我会收到多少智能代币?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;代币新发行量 = 1000 * ((1+10/250)^50%-1) ≈ 19.8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，我的购买价格为：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;有效价格 = 10 / 19.8 ≈ 0.5051&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用 Bancor 好处是，价格透明、可预测，且没有交易费，只需支付以太网交易的 gas 费用。Bancor 并不适合交易量大的数字货币，比如 Bitcoin 和 ETH，这些价格变动由外部市场决定，人为的指定一个 CW 和储备金，很难跟得上外部市场的变化。而对于小交易量的数字货币，受限于其使用场景，什么时候你需要换取这些没什么交易量的货币？&lt;/p&gt;

&lt;h3 id=&quot;bancor-应用场景&quot;&gt;Bancor 应用场景&lt;/h3&gt;

&lt;h4 id=&quot;eos-ram&quot;&gt;EOS RAM&lt;/h4&gt;

&lt;p&gt;EOS 的内存买卖，前段时间被炒得火热，吸引了大批投机者，EOS 内存的定价机制使用的正是 Bancor 协议，做了一点修改，买入 RAM 时 余额用的是当前储备金 EOS 余额加上本次买入的 EOS 数量，而卖出 RAM 时 balance 用的是当前 RAM 流通量减去本次卖掉的 RAM 数量。详细见这篇&lt;a href=&quot;https://steemit.com/bancor/@chaimyu/ram-bancor&quot;&gt;RAM的Bancor协议详解&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;p3d&quot;&gt;P3D&lt;/h4&gt;

&lt;p&gt;FOMO3D 之前火了一阵的以太坊游戏，在这个游戏中，拥有 P3D 可以获取一些分红。P3D 是 FOMO3D 团队之前做的一个游戏所发行的 Token，其发行机制类似于 Bancor，也是发行的 P3D 越多，则 P3D的价格越高，只是它并不使用 Bancor 公式。价格变化规则是：每卖出一个 P3D，价格上涨 10 gwei，每买入一个 P3D，价格下降 10 gwei。（1 gwei = 0.00000001 ETH），如下：&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;P3D token1 = 1.00000000/ETH&lt;br /&gt;
P3D token2 = 1.00000010/ETH&lt;br /&gt;
P3D token3 = 1.00000020/ETH&lt;br /&gt;
P3D token4 = 1.00000030/ETH&lt;br /&gt;
P3D token5 = 1.00000040/ETH&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关于价格的计算，P3D 官网提供了详细的公式推导，见&lt;a href=&quot;https://powh3d.eu/math&quot;&gt;这里&lt;/a&gt;，比 Bancor 的简单些。由于 Bancor 的价格计算要使用到方根和次方，而以太坊的 EVM 不支持这些数学函数，所以 Bancor 合约中在计算价格时做了一些转换，计算近似值，很难懂。这点还是 EOS 方便，支持 pow、log。当然，这是题外话了。&lt;/p&gt;

&lt;p&gt;除了这几个场景，bancor 还可以怎么用？积分系统是一个场景，用户每次购买商品，都返一定额度的积分，这可在结账过程中自动完成，积分可在用户间自由交换。商家也可提供指定商品，只能通过积分来购买，从而回收积分，以免积分的价格过高，用户返利少。还有，公司发行的股份也可以通过 Bancor 来做，购买来的股份也是一种代币，可以直接购买公司所提供的服务，中间的代币及价格转换都在系统中自动完成（所有通过 Bancor 发行的代币组成一个网络，任何两个代币之间可以自由转换）。另外，可以设定持有股份者获取分红，这类似与 FOMO3D 的 P3D。&lt;/p&gt;

&lt;p&gt;参考&lt;br /&gt;
&lt;a href=&quot;http://bigshark.club/2017/07/27/gold-money-bancor/&quot;&gt;黄金、法币、班科&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://steemit.com/bancor/@chaimyu/ram-bancor&quot;&gt;RAM的Bancor协议详解&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://8btc.com/thread-49136-1-1.html&quot;&gt;Bancor协议：—种分层货币系统兼去中心化交易所&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/FIBOSIO/bancor/raw/master/Bancor_cn.pdf&quot;&gt;Bancor 中文白皮书&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://storage.googleapis.com/website-bancor/2018/04/01ba8253-bancor_protocol_whitepaper_en.pdf&quot;&gt;Bancor 英文白皮书&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/bancorprotocol/contracts&quot;&gt;bancor contract&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bancor&quot;&gt;Bancor wiki&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Bancor 是什么</summary></entry><entry><title type="html">ARTS w01</title><link href="/arts/2018/08/11/ARTS-w01.html" rel="alternate" type="text/html" title="ARTS w01" /><published>2018-08-11T11:34:14+08:00</published><updated>2018-08-11T11:34:14+08:00</updated><id>/arts/2018/08/11/ARTS-w01</id><content type="html" xml:base="/arts/2018/08/11/ARTS-w01.html">&lt;h2 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 29 题，&lt;a href=&quot;https://leetcode.com/submissions/detail/168774665/&quot;&gt;Divide Two Integers &lt;/a&gt;，给两个整数：除数和被除数，要求不使用乘法、除法、取余，计算两个数的商。&lt;br /&gt;
例子：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Input: dividend = 10, divisor = 3&lt;br /&gt;
Output: 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dividend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dividend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;highest_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dividend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highest_bit&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFFF&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#            print('res', res)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;negative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dividend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negative&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max_sign_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_sign_int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_sign_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_sign_int&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这道题花了四个多小时，解题思路：使用位移操作，从 dividend 的高位开始，减去除数 divisor。但过程比较复杂，容易出错，计算了半天。&lt;/p&gt;

&lt;p&gt;翻了其他人的代码，有一个比较简洁：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;divide_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dividend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dividend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dividend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dividend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'reset'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个逻辑清晰，代码简洁。dividend 不断减去 divisor 的 1、2、3……倍，不够减时再重置 divisor，直到 dividend 小于最初的 divisor。&lt;/p&gt;

&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;

&lt;p&gt;medium 的一篇文章 &lt;a href=&quot;https://medium.com/@mycoralhealth/code-your-own-proof-of-stake-blockchain-in-go-610cd99aa658&quot;&gt;Code your own Proof of Stake blockchain in Go!&lt;/a&gt;，用 go 语言实现一个简单的 PoS（Proof of Stake）。最近看了很多以太坊 casper 的资料，casper 也是权益证明，看的云里雾里。这篇文章却给我提供了一个新的思路，一个简单可运行的PoS版本，理解 PoS 的核心。&lt;/p&gt;

&lt;p&gt;文章首先介绍了什么是 PoS，然后是 PoS 的弊端，然后就开始编码实现一条 PoS 区块链了！主要实现了两个功能，1. 伪点对点网络，节点之间的通讯通过一个中心的 TCP Server。2. 钱包和余额追踪。这两个功能就可以启动一条链。用一张图介绍了代码的结构，很直观。接着就是手把手教你写代码了。这是我很喜欢读英文技术文章的原因，他们会把思考的过程都梳理出来，让你清楚的知道全部的逻辑，以及为什么要这么做。他们基本都会从最简单的开始，如果没有也会给你相关链接，告诉你要先了解哪些信息，非常友好的技术文章。&lt;/p&gt;

&lt;h2 id=&quot;tip&quot;&gt;Tip&lt;/h2&gt;
&lt;p&gt;从上面的文章，学了一个小技巧，使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt; 和 TCP Server 交互通讯，很方便。文章中的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; nc localhost 9090
Enter token balance:100

Enter a new BPM:1

Enter a new BPM:2

Enter a new BPM:3

ca548b272862d4b4ed497bda28560fe7e1624b9d8b8cee18e50731f6d4ba74d1 赢得了记账权利
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;share&quot;&gt;Share&lt;/h2&gt;

&lt;p&gt;最近看 bancor 的一些资料，分享一篇文章 &lt;a href=&quot;http://hackingdistributed.com/2017/06/19/bancor-is-flawed/&quot;&gt;Bancor Is Flawed&lt;/a&gt;，作者指责 bancor 团队用几行代码筹集了 1444 万美元，并细数了 bancor 的十八条罪状，如 bancor 的存在没意义、代码糟糕。评论区值得看，有几个大神为 bancor 辩护， bancor 团队针对每一条都做了详细的回复，&lt;a href=&quot;https://blog.bancor.network/this-analysis-of-bancor-is-flawed-18ab8a000d43&quot;&gt;Response to “Bancor is Flawed”
&lt;/a&gt;。看他们如何去辩论，了解不同的观点，能够帮助思考 bancor 的应用，bancor 并不大适合用来做 Token 之间转换的交易，这个另外写一篇，好好梳理下。&lt;/p&gt;</content><author><name></name></author><summary type="html">Algorithm leetcode 29 题，Divide Two Integers ，给两个整数：除数和被除数，要求不使用乘法、除法、取余，计算两个数的商。 例子：</summary></entry></feed>